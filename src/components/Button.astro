---
export interface Props {
className?: string,
href?: string,
externalTarget?: boolean,
fullWidth?: boolean,
ariaExpanded?: string,
ariaLabel?: string,

}

const { className, href, externalTarget, fullWidth, ariaExpanded, ariaLabel } = Astro.props;
---



{(() => {
    if (href && externalTarget) 
        return (
				<a target="_blank" rel="noopener" href={href} 
				class={`btn ${className} ${fullWidth ? 'btn-block' : ''}`}><slot />
				</a>	
				);
        if (href) 
            return (
							<a href={href} class={`btn ${className} ${fullWidth ? 'btn-block' : ''}`}><slot /></a>
						);
         else 
				 return (
            <button class={`btn ${className} ${fullWidth ? 'btn-block' : ''}`} aria-expanded={ariaExpanded} aria-label={ariaLabel}><slot /></button>
				 );
 
})()}



<style>
:where(.btn) {
  display: inline-flex;
  padding: 0.5em 1.5em;

  border: 1px solid transparent;
  border-radius: var(--radius-pill);
  text-decoration: none;
  cursor: pointer;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: var(--tracking-loose);
  text-align: center;
  align-items: center;
  justify-content: center;
}

:where(.btn-block) {
  display: flex;
  max-width: 100%;
}

.btn-default {
  padding: 0;
  border: 0;
  border-radius: 0;
}

.btn-primary {
  background: var(--color-primary);
  color: var(--color-lite);
}

.btn-primary:hover,
.btn-primary:focus {
  color: var(--color-white);
  background: var(--color-primary-dark);
}

.btn-primary:focus {
  outline: var(--focus);
  outline-offset: 0.15rem;
}
</style>
